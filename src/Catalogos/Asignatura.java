/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Catalogos;

import Datos.Conexion;
import Datos.ListaEleccion;
import java.awt.event.ItemEvent;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Paul
 */
public class Asignatura extends javax.swing.JDialog {
    private String accion;
    public Conexion enlace;
    public Asignaturas padre;
    
    /**
     * Creates new form Asignatura
     */
    public Asignatura() {
        initComponents();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * 
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lcodigo = new javax.swing.JLabel();
        nombre = new javax.swing.JTextField();
        ldescri = new javax.swing.JLabel();
        boton_guardar = new javax.swing.JButton();
        boton_cancelar = new javax.swing.JButton();
        id = new javax.swing.JTextField();
        lacademia = new javax.swing.JLabel();
        academia = new javax.swing.JComboBox();
        lcarrera = new javax.swing.JLabel();
        carrera = new javax.swing.JComboBox();
        lnstitucion = new javax.swing.JLabel();
        institucion = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Egel");
        setMinimumSize(new java.awt.Dimension(580, 200));
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setPreferredSize(new java.awt.Dimension(580, 200));
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(null);

        lcodigo.setText("ID");
        getContentPane().add(lcodigo);
        lcodigo.setBounds(40, 260, 120, 14);

        nombre.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        nombre.setMinimumSize(new java.awt.Dimension(8, 24));
        nombre.setPreferredSize(new java.awt.Dimension(8, 24));
        getContentPane().add(nombre);
        nombre.setBounds(230, 280, 310, 28);

        ldescri.setText("Nombre");
        getContentPane().add(ldescri);
        ldescri.setBounds(230, 260, 310, 14);

        boton_guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/GuardarTodo.png"))); // NOI18N
        boton_guardar.setMnemonic('G');
        boton_guardar.setText("OK");
        boton_guardar.setToolTipText("Guardar registro");
        boton_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_guardarActionPerformed(evt);
            }
        });
        getContentPane().add(boton_guardar);
        boton_guardar.setBounds(270, 360, 130, 40);

        boton_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        boton_cancelar.setMnemonic('C');
        boton_cancelar.setText("Cancelar");
        boton_cancelar.setToolTipText("Cancelar actualización");
        boton_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cancelarActionPerformed(evt);
            }
        });
        getContentPane().add(boton_cancelar);
        boton_cancelar.setBounds(410, 360, 130, 40);

        id.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        id.setMinimumSize(new java.awt.Dimension(8, 24));
        id.setPreferredSize(new java.awt.Dimension(8, 24));
        getContentPane().add(id);
        id.setBounds(40, 280, 120, 28);

        lacademia.setText("Academia");
        getContentPane().add(lacademia);
        lacademia.setBounds(40, 180, 120, 14);

        getContentPane().add(academia);
        academia.setBounds(40, 210, 350, 28);

        lcarrera.setText("Carrera");
        getContentPane().add(lcarrera);
        lcarrera.setBounds(40, 100, 80, 14);

        carrera.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                carreraItemStateChanged(evt);
            }
        });
        getContentPane().add(carrera);
        carrera.setBounds(40, 130, 500, 28);

        lnstitucion.setText("Institución");
        getContentPane().add(lnstitucion);
        lnstitucion.setBounds(40, 20, 100, 14);

        institucion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                institucionItemStateChanged(evt);
            }
        });
        getContentPane().add(institucion);
        institucion.setBounds(40, 50, 500, 28);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-602)/2, (screenSize.height-483)/2, 602, 483);
    }// </editor-fold>//GEN-END:initComponents

    private void boton_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_guardarActionPerformed
      // Validamos los datos  (Hace falta trabajo aquí)      
      if (carrera.getSelectedIndex()==-1)
      {
          JOptionPane.showMessageDialog(this, "No se seleccionó una carrera",
                                              "Mensaje", JOptionPane.WARNING_MESSAGE);
          nombre.requestFocus();
          return;
      }    
      
      if (academia.getSelectedIndex()==-1)
      {
          JOptionPane.showMessageDialog(this, "No se seleccionó una academia",
                                              "Mensaje", JOptionPane.WARNING_MESSAGE);
          nombre.requestFocus();
          return;
      } 
      
      if (nombre.getText().isEmpty())
      {
          JOptionPane.showMessageDialog(this, "No se capturó el nombre de la Asignatura",
                                              "Mensaje", JOptionPane.WARNING_MESSAGE);
          nombre.requestFocus();
          return;
      }            
    
      Datos.Asignatura oAsignatura = new Datos.Asignatura(enlace);    
        
      // El ID lo genera automáticamente la base de datos cuando el registro es nuevo
      int idx;
      idx = (id.getText().isEmpty())?0:Integer.valueOf(id.getText());
      oAsignatura.setAsignatura(idx,
                                 nombre.getText(),
                                 ((ListaEleccion)carrera.getSelectedItem()).id,
                                 ((ListaEleccion)academia.getSelectedItem()).id
                                  ); 
      
      if (this.accion.equals("NUEVO"))
      {
        // Se manda escribir a la base de datos
        if (!oAsignatura.Nuevo())
        {
          nombre.requestFocus();
          return;
        }
        else
        {
          padre.cargarTabla();
          nombre.setText("");
          nombre.requestFocus();
        }
      }
   
      if (this.accion.equals("EDITAR"))
      {
        // Se manda escribir a la base de datos
        if (!oAsignatura.Editar())
        {
          nombre.requestFocus();
          return;
        }
      }      
    
      if (this.accion.equals("ELIMINAR"))
      {
        // Se manda escribir a la base de datos
        if (!oAsignatura.Eliminar())
        {
          boton_guardar.requestFocus();
          return;
        }
      }
      padre.cargarTabla();
      if (this.accion.equals("NUEVO"))
      {
         nombre.setText("");
         nombre.requestFocus();
      }
      else
      {
         this.dispose();
      }
    }//GEN-LAST:event_boton_guardarActionPerformed

    private void boton_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cancelarActionPerformed
        dispose();
    }//GEN-LAST:event_boton_cancelarActionPerformed

    private void institucionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_institucionItemStateChanged
        refreshCarrera();
    }//GEN-LAST:event_institucionItemStateChanged

    private void carreraItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_carreraItemStateChanged
        refreshAcademia();
    }//GEN-LAST:event_carreraItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Egel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Asignatura().setVisible(true);                               
            }
        });
    }
    
    public void configurarPara(String accion)
    {
        this.accion = accion;
        if (accion.equals("NUEVO"))
        {            
           id.setEnabled(false);
           refreshInstitucion();
        }

        if (accion.equals("EDITAR"))
        {
            habilitarCampos(true);
            id.setEnabled(false);
        }
        
        if (accion.equals("ELIMINAR"))
        {
            habilitarCampos(false);            
        }
    }
    
    public void habilitarCampos(boolean estado)
    {
        institucion.setEnabled(estado);
        id.setEditable(estado);
        nombre.setEditable(estado);    
        carrera.setEnabled(estado);
        academia.setEnabled(estado);
   }
    
   public void cargarCampos(int idx)
    {
        Datos.Asignatura oAsignatura = new Datos.Asignatura(enlace);
        oAsignatura.Buscar(idx);
        refreshInstitucion();
        institucion.setSelectedItem(new ListaEleccion(oAsignatura.getInstitucion_id(),""));
        //refreshCarrera();
        carrera.setSelectedItem(new ListaEleccion(oAsignatura.getCarrera_id(),""));    
        //refreshAcademia();
        academia.setSelectedItem(new ListaEleccion(oAsignatura.getAcademia_id(),""));
        id.setText(Integer.toString(oAsignatura.getID()));        
        nombre.setText(oAsignatura.getNombre());
   }    
   
   private void refreshInstitucion()
   {
       // Cargamos los datos de la tabla Institucion a la lista
       Datos.Institucion oInstitucion = new Datos.Institucion(enlace);
       DefaultComboBoxModel datos_institucion = new DefaultComboBoxModel();
       datos_institucion.removeAllElements();
       Vector items_institucion = new Vector();
       items_institucion.addAll(oInstitucion.Lista());
       for (int i = 0; i < items_institucion.size(); i++)
       {
         datos_institucion.addElement(items_institucion.get(i));
       }
       institucion.setModel(datos_institucion);
       refreshCarrera();
   }
      
   private void refreshCarrera()
   {
       // Actualiza solo si hay una institución seleccionada
       if (institucion.getSelectedIndex()!=-1)
       {
          Datos.Carrera oCarrera = new Datos.Carrera(enlace);
          DefaultComboBoxModel datos_carrera = new DefaultComboBoxModel();
          datos_carrera.removeAllElements();
          Vector items_carrera = new Vector();
          items_carrera.addAll(oCarrera.Lista(((ListaEleccion)institucion.getSelectedItem()).id));
          for (int i = 0; i < items_carrera.size(); i++)
          {
            datos_carrera.addElement(items_carrera.get(i));
          }
          carrera.setModel(datos_carrera);  
          refreshAcademia();
       }
   }
   
   private void refreshAcademia()
   {     
       // Actualiza solo si hay una carrera seleccionada
       if (carrera.getSelectedIndex()!=-1)
       {
          Datos.Academia oAcademia = new Datos.Academia(enlace);
          DefaultComboBoxModel datos_academia = new DefaultComboBoxModel();
          datos_academia.removeAllElements();
          Vector items_academia = new Vector();
          items_academia.addAll(oAcademia.Lista(((ListaEleccion)carrera.getSelectedItem()).id));
          for (int i = 0; i < items_academia.size(); i++)
          {
            datos_academia.addElement(items_academia.get(i));
          }
          academia.setModel(datos_academia);  
          //JOptionPane.showMessageDialog(null, "Academia");
       }
   }
   

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox academia;
    private javax.swing.JButton boton_cancelar;
    private javax.swing.JButton boton_guardar;
    private javax.swing.JComboBox carrera;
    private javax.swing.JTextField id;
    private javax.swing.JComboBox institucion;
    private javax.swing.JLabel lacademia;
    private javax.swing.JLabel lcarrera;
    private javax.swing.JLabel lcodigo;
    private javax.swing.JLabel ldescri;
    private javax.swing.JLabel lnstitucion;
    private javax.swing.JTextField nombre;
    // End of variables declaration//GEN-END:variables
}
